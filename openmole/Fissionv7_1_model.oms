// inputs
val seed = Val[Int]
val size_initial_colony = Val[Double]
val percentage_foragers = Val[Double]
val number_nests = Val[Double]
val nests_quality = Val[Double]
val nests_quality_SD = Val[Double]
val position_nests = Val[String]
val exclusion_radius = Val[Double]
val nest_quality_assessment_error = Val[Double]
val choice_strategy = Val[String]
val exploring_phase = Val[Double]
val max_ticks = Val[Double]  // durée maximale de la simu (pas de temps) forcer à arréter

val probability_of_transporting = Val[String]
// unconditional, linear, exponential , logarithmic, logistic

// inputs utilisées selon la valeur de probability_of_transporting
val exponential_factor = Val[Double]
val logarithmic_factor = Val[Double]
val logistic_factor_mu = Val[Double]
val logistic_factor_s = Val[Double]


// outputs
val ticks = Val[Double]   // pas de temps final effectif
val number_new_colonies = Val[Double]
val mean_resources_new_colonies = Val[Double] 
val CV = Val[Double]   // coefficient de variation, sur les ressources
val mean_quality_chosen_nests = Val[Double]
val mean_quality_all_nests = Val[Double]
val mean_distance_chosen_nests = Val[Double]
val mean_distance_all_nests = Val[Double]
// la première valeur de chaque tableau corresponnd bien au même nid 
val raw_resources_new_colonies = Val[Array[Double]]  
val raw_quality_chosen_nests = Val[Array[Double]] 
val raw_distance_chosen_nests = Val[Array[Double]]

// nouvelles outputs
val visiting_workers_all_nests = Val[Array[Double]]
val visited_nests_all_workers = Val[Array[Double]]


val launch = List("random-seed ${seed}", "setup", "while [not stop_sim?] [go]")



val Fission_v7Task = NetLogo6Task(workDirectory / "Fission_v7.2b-headless.nlogo", 
launch, 
embedWorkspace = false, 
seed=seed //,
//containerSystem = Proot(noSeccomp = true)
) set(
    (inputs,outputs) += (seed),
    inputs += size_initial_colony mapped "size_initial_colony",
    inputs += percentage_foragers mapped "percentage_foragers",
    inputs += number_nests mapped "number_nests",
    inputs += nests_quality mapped "nests_quality",
    inputs += nests_quality_SD mapped "nests_quality_SD",
    inputs += position_nests mapped "position_nests",
    inputs += exclusion_radius mapped "exclusion_radius",
    inputs += nest_quality_assessment_error mapped "nest_quality_assessment_error",
    inputs += choice_strategy mapped "choice_strategy",
    inputs += exploring_phase mapped "exploring_phase",
    inputs += max_ticks mapped "max_ticks",
    inputs += probability_of_transporting mapped "probability_of_transporting",
    
    //inputs += exponential_factor mapped "exponential_factor",
    //inputs += logarithmic_factor mapped "logarithmic_factor",
    //inputs += logistic_factor_mu mapped "logistic_factor_mu",
    //inputs += logistic_factor_s mapped "logistic_factor_s",
    (inputs, outputs) +=(exponential_factor,logarithmic_factor,logistic_factor_mu,logistic_factor_s),

    outputs += size_initial_colony mapped "size_initial_colony",
    outputs += percentage_foragers mapped "percentage_foragers",
    outputs += number_nests mapped "number_nests",
    outputs += nests_quality mapped "nests_quality",
    outputs += nests_quality_SD mapped "nests_quality_SD",
    outputs += position_nests mapped "position_nests",
    outputs += exclusion_radius mapped "exclusion_radius",
    outputs += nest_quality_assessment_error mapped "nest_quality_assessment_error",
    outputs += choice_strategy mapped "choice_strategy",
    outputs += exploring_phase mapped "exploring_phase",
    outputs += max_ticks mapped "max_ticks",
    outputs += probability_of_transporting mapped "probability_of_transporting",

    outputs += visiting_workers_all_nests mapped "visiting_workers_all_nests",
    outputs += visited_nests_all_workers mapped "visited_nests_all_workers",


    // les inputs qu'on met en outpout
    outputs += ticks mapped "ticks",
    outputs += number_new_colonies mapped "number_new_colonies",
    outputs += mean_resources_new_colonies mapped "mean_resources_new_colonies",
    outputs += CV mapped "CV",
    outputs += mean_quality_chosen_nests mapped "mean_quality_chosen_nests",
    outputs += mean_quality_all_nests mapped "mean_quality_all_nests",
    outputs += mean_distance_chosen_nests mapped "mean_distance_chosen_nests",
    outputs += mean_distance_all_nests mapped "mean_distance_all_nests",
    outputs += raw_resources_new_colonies mapped "raw_resources_new_colonies",
    outputs += raw_quality_chosen_nests mapped "raw_quality_chosen_nests",
    outputs += raw_distance_chosen_nests mapped "raw_distance_chosen_nests",


    //Default values. Can be removed if OpenMOLE Vals are set by values coming from the workflow

    seed := 1,
    size_initial_colony := 1000.0, //800.0,
    percentage_foragers := 42.0,
    number_nests := 40.0,  // ou 100 ?
    nests_quality := 70.0,  // 75 ?
    nests_quality_SD := 50.0,  // 50 ?
    position_nests := "random",
    exclusion_radius := 10.0,  // 10 ?
    nest_quality_assessment_error :=  23.0, // 3.0,  // 25 ?
    choice_strategy := "best_nest",
    exploring_phase := 2500.0,  // 500 ?
    max_ticks := 20000.0,
    probability_of_transporting := "unconditionnal",
    
    exponential_factor := 0.5,  
    logarithmic_factor := 20.0,
    logistic_factor_mu := 80.0,
    logistic_factor_s := 5.0


 /*   
    seed := 1,
    //seed := -1229591527,
    size_initial_colony := 1000.0, //800.0,
    //size_initial_colony := 600, 
    percentage_foragers := 10.0,
    //percentage_foragers := 1.0, 
    number_nests := 40.0,  // ou 100 ?
    nests_quality := 70.0,  // 75 ?
    nests_quality_SD := 50.0,  // 50 ?
    position_nests := "random",
    exclusion_radius := 10.0,  // 10 ?
    nest_quality_assessment_error :=  0.0, // 3.0,  // 25 ?
    //nest_quality_assessment_error := 0.630148139116401, 
    choice_strategy := "best_nest",
    exploring_phase := 2500.0,  // 500 ?
    max_ticks := 20000.0,
    probability_of_transporting := "unconditionnal",
    
    exponential_factor := 0.5,  
    logarithmic_factor := 20.0,
    logistic_factor_mu := 80.0,
    logistic_factor_s := 5.0
*/    
    
//openmole$seed=2269400489955222954, 
    /*
    seed := 40809895,
    size_initial_colony := 800.0,
    percentage_foragers := 65.0,
    number_nests := 40.0,
    nests_quality := 70.0,
    nests_quality_SD := 50.0,
    position_nests := "random",
    exclusion_radius := 10.0,
    nest_quality_assessment_error := 3.0,
    choice_strseedategy := "best_nest",
    exploring_phase := 2500.0,
    max_ticks := 10000.0,
    probability_of_transporting := "unconditionnal",
    
    exponential_factor := 0.5,  
    logarithmic_factor := 20.0,
    logistic_factor_mu := 80.0,
    logistic_factor_s := 5.0
    */
)




Fission_v7Task hook DisplayHook(seed,size_initial_colony,percentage_foragers,number_nests,number_new_colonies, raw_resources_new_colonies, raw_quality_chosen_nests, raw_distance_chosen_nests)
Fission_v7Task hook DisplayHook(visiting_workers_all_nests, visited_nests_all_workers)
