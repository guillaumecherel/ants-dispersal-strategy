;;;;;;;;;; DEFINITION OF VARIABLES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

globals
[
   ;; for the "headless" version analysed with OpenMole: variables that are defined in the GUI in the "stand alone" version
  seed
  size_initial_colony
  percentage_foragers
  amount_allocated
  number_nests
  nests_quality
  nests_quality_SD
  position_nests
  exclusion_radius
  nest_quality_assessment_error
  choice_strategy                       ; may be "best_nest" ; "best_visited_VS_last_visited_nest" ; "best_of_last_n" ; "last_nest" or "rotating_choice"
  n
  exploring_phase
  max_ticks
  probability_of_transporting
  exponential_factor
  logarithmic_factor
  logistic_factor_mu
  logistic_factor_s

  number_foragers

  ;; for raw outputs
  number_new_colonies
  chosen_nests                          ; agentset to rank chosen_nests by size
  raw_resources_new_colonies
  raw_quality_all_nests
  raw_quality_chosen_nests
  raw_distance_chosen_nests

  ;; for "aggregated" outputs
  mean_resources_new_colonies
  CV                                     ; coefficient of variation in resources between chosen_nests
  mean_quality_chosen_nests
  mean_quality_all_nests
  mean_distance_chosen_nests
  mean_distance_all_nests
  visiting_foragers_all_nests
  visited_nests_all_foragers
]

breed [initial_colonies initial_colony]  ; initial colony, from where foragers will transport resources to new colonies founded by colony fission
breed [nests nest]                       ; potential nesting sites, where new_colonies could be founded
breed [foragers forager]                 ; individuals that carry out resource allocation to new nest(s)
breed [end_foragers end_forager]         ; foragers that have self allocated to a new nest

turtles-own [resources]                  ; initial_colony, nests and foragers have or transport resources (ie other workers, queen and brood)
nests-own
[
  quality                                ; nests may vary in quality
  visiting_foragers                      ; number of foragers that have visited a given nest
]
foragers-own
[
  state                                  ; foragers are in 1 of 4 states: exploring, returning to the initial colony, transporting resource to a chosen nest, self_allocating oneself to a chosen nest
  motivated_to_transport?                ; foragers that have visited nest(s) may be motivated to transport resources to their chosen_nest depending on its measured quality. The default setting is motivated irrespective of chosen_nest quality
  visited_patches                        ; agentset of all visited patches
  current_visited_nest                   ; nest visited last
  visited_nests                          ; agentset of all visited nests
  list_n_nests_visited_last              ; list of the n nests visited last
  chosen_nest                            ; ID of chosen nest
  assessed_quality_of_chosen_nest
]

end_foragers-own [visited_nests]


;;;;;;;;;; SETUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to setup-globals
  ;; Used by OpenMole to test varied parameter values
  set size_initial_colony 1808
  set percentage_foragers 20
  set amount_allocated 1759
  set number_nests 50
  set nests_quality 70
  set nests_quality_SD 50
  set position_nests "random"
  set exclusion_radius 10
  set nest_quality_assessment_error 3
  set choice_strategy "current_vs_previous_best"
  set n 5
  set exploring_phase 2000
  set max_ticks 100000
  set probability_of_transporting "unconditionnal"
  set exponential_factor 0.05
  set logarithmic_factor 20
  set logistic_factor_mu 80
  set logistic_factor_s 5
end


to setup
   ;;  tests for negative values if generated by OpenMole, and corrects them to zero
  if size_initial_colony < 0 [set size_initial_colony 0]
  if percentage_foragers < 0 [set percentage_foragers 0]
  if amount_allocated < 0 [set amount_allocated 0]
  if number_nests < 0 [set number_nests 0]
  if nests_quality < 0 [set nests_quality 0]
  if nests_quality_SD < 0 [set nests_quality_SD 0]
  if exclusion_radius < 0 [set exclusion_radius 0]
  if nest_quality_assessment_error < 0 [set nest_quality_assessment_error 0]
  if n < 1 [set n 1]
  if exploring_phase < 0 [set exploring_phase  0]
  if exploring_phase > max_ticks [set exploring_phase max_ticks - 10]
  if exponential_factor < 0 [set exponential_factor 0]
  if logarithmic_factor < 0 [set logarithmic_factor 0.001]
  if logistic_factor_mu < 0 [set logistic_factor_mu 0]
  if logistic_factor_s < 0 [set logistic_factor_s 0.001]

  setup-patches
  setup-initial_colony
  setup-nests
  setup-foragers
  reset-ticks
end


;;;;;;;;;; GO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to go
  move                                                 ; foragers move to (1) explore the map, (2) return to the initial colony, (3) transport resources to a chosen nest, and (4) self allocate to their chosen_nest
  tick
end


to-report stop_sim?
  ; let s sum [resources] of nests = size_initial_colony or ticks = max_ticks
  let s sum [resources] of nests = amount_allocated or ticks = max_ticks            ; simulation ends when all allocated resources are in new nests, or time ran out
  if s
  [
    calculate_output_data
  ]
  report s
end


;;;;;;;;;; SETUP PROCEDURES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to setup-patches
  ask patches [set pcolor green]
end


to setup-initial_colony                                  ; sets up the initial_colony in the centre of the map with all resources
  if amount_allocated > size_initial_colony [set amount_allocated size_initial_colony]
  if percentage_foragers > (amount_allocated / size_initial_colony * 100) [set percentage_foragers (amount_allocated / size_initial_colony * 100)]
  set number_foragers int (size_initial_colony * percentage_foragers / 100) - 1       ; There is at least one resource that is not a forager

  create-initial_colonies 1
  [
    setxy 0 0
    set shape "circle"
    set color black
    set resources amount_allocated - number_foragers
    set label resources
  ]
end


to setup-nests
  ifelse position_nests = "equidistant"
  [                                                                              ; sets up nests in a circle around the initial_colony, at a distance of 25 patches
    create-ordered-nests number_nests [jump 25]
  ]
  ; end of ifelse position = equidistant

  [                                                                              ; sets up nests in random position BUT not in an exclusion radius around the intial nest
    ask [patches in-radius exclusion_radius] of patch 0 0 [set pcolor lime]      ; visualises the exclusion radius (approximate as it show patches not actual exclusion radius)
    create-nests number_nests
    [
      setxy random-xcor random-ycor
      while [any? nests with [distance initial_colony 0 < exclusion_radius]]     ; nests generated in the exclusion radius change position until no nests are in the exclusion radius
      [
        ask nests with [distance initial_colony 0 < exclusion_radius]
        [
          setxy random-xcor random-ycor
          ; note that some nests may be located very close to one another. If one wishes, one could avoid this by re-creating nests falling within radius eg 1 of an existing nest
        ]
      ]
    ]
  ]
  ; end of ifelse position = random


  ask nests
  [
    set shape "circle"
    set color brown
    set quality int random-normal nests_quality nests_quality_SD
    if quality < 0 [set quality 0]
    set label quality
    set resources 0
    set visiting_foragers no-turtles
  ]
end


to setup-foragers
  create-foragers number_foragers                                ; foragers are black bugs and start in the initial_colony
  [
    set shape "bug"
    setxy 0 0
    set color black
    set current_visited_nest nobody                             ; empty agent
    set visited_patches no-patches                              ; empty agentset
    set visited_nests no-turtles                                ; empty agentset
    set list_n_nests_visited_last []                            ; empty list
    set chosen_nest nobody
    set state "exploring"
    set motivated_to_transport? false                           ; at the beginning, foragers are not motivated to transport but only to explore
  ]
end


;;;;;;;;;; GO PROCEDURES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to move
  ask foragers
  [
    (ifelse
      ticks < exploring_phase
      [
        explore
        chose_nests
      ]

      ticks = exploring_phase
      [
        ifelse chosen_nest = nobody
        [
          ask initial_colony 0 [set resources resources + 1]
          die
        ]
        [
          setxy 0 0
          set state "returning"
        ]
      ]

      ticks > exploring_phase
      [
        if state = "returning" [return]
        if state = "transporting" [transport]
        if state = "self_allocating" [self_allocate]
      ]
    )
  ]
end


to explore                          ; foragers explore the map with random walk with + or - 45Â° deviation
  ifelse random 100 < 50
  [right random 45]
  [left random 45]
  forward 0.75                      ; the lenght of movement must be less than the detection radius around nests, else an agent could "jump" over a nest without detecting it
  set visited_patches (patch-set visited_patches patch-here)
end


to chose_nests
  if any? nests in-radius 1                                                      ; any forager within a radius 1 around a nest detects this nest
  [
    set current_visited_nest min-one-of nests in-radius 1 [distance self]        ; if a forager detects two nests she chooses the closest one
    set color blue

    if not member? current_visited_nest visited_nests [set list_n_nests_visited_last fput current_visited_nest list_n_nests_visited_last]
    ; nests that have been visited previously are not reassessed
    if length list_n_nests_visited_last > n [set list_n_nests_visited_last remove-item n list_n_nests_visited_last]

    set visited_nests (turtle-set visited_nests current_visited_nest)

    run choice_strategy

    ask current_visited_nest
    [
      set color blue
      set visiting_foragers (turtle-set visiting_foragers myself)
    ]
    set current_visited_nest nobody
  ]
end


to current_vs_previous_best
  ifelse chosen_nest = nobody
  [set chosen_nest current_visited_nest]
  [if not member? self [visiting_foragers] of current_visited_nest [if [quality] of current_visited_nest > [quality] of chosen_nest [set chosen_nest current_visited_nest]]]
  ; if the forager has not previously visited the current_nest she assesses its quality. This strategy yields the same result than best_nest.
end


to best_of_last_n
  let temp turtle-set list_n_nests_visited_last
  set chosen_nest max-one-of temp [int random-normal (quality) (quality * nest_quality_assessment_error / 100)]
  ; Note that the quality of nests that have been visited multiple times is not better assessed!
end


to rotating_choice
  set chosen_nest one-of visited_nests
end


to return
  face initial_colony 0
  forward 0.75

  if distance initial_colony 0 < 1              ; if the initial_colony is at less than 1 unit of distance the forager is at the initial_colony
  [
    ifelse [resources] of initial_colony 0 != 0

    ; if the initial_colony is not empty of resources, the forager collects resources and starts going back to the chosen nest
    [
      ; updates rotating_choice at each return to the initial colony
      if choice_strategy = "rotating_choice" [set chosen_nest one-of visited_nests]

      run probability_of_transporting
      if motivated_to_transport?
      [
        collect_resource
        set state "transporting"
      ]
    ]

    ; if the initial_colony is empty, the forager starts going back to the chosen nest in order to join it
    [
      set state "self_allocating"
      set color yellow
    ]
  ]
end


to unconditionnal
  set motivated_to_transport? true
end


to linear
  if assessed_quality_of_chosen_nest >= random 100 [set motivated_to_transport? true]
end


to exponential
  if exp (assessed_quality_of_chosen_nest * exponential_factor) >= random 100 [set motivated_to_transport? true]
end


to logarithmic
   if ln (1 + assessed_quality_of_chosen_nest) * logarithmic_factor >= random 100  [set motivated_to_transport? true]
end


to logistic
  if 100 / (1 + exp (- (assessed_quality_of_chosen_nest - logistic_factor_mu) / logistic_factor_s)) >= random 100  [set motivated_to_transport? true]
end


to transport
  face chosen_nest
  forward 0.75
  if distance chosen_nest < 1                 ; if the chosen nest is at less than 1 unit of distance the forager is at the chosen nest
  [
    deposit_resource
    set motivated_to_transport? false         ; the motivation to transport is reset to false so that it is tested at each return to the initial colony
  ]
end


to self_allocate
  face chosen_nest
  forward 0.75
  if distance chosen_nest < 1                                    ; if the chosen nest is at less than 1 unit of distance the forager joins this nest
  [
    ask chosen_nest
    [
      set color yellow
      set resources (resources + 1)
      set label resources
    ]
    set breed end_foragers
  ]
end


to collect_resource
  if [resources] of initial_colony 0 > 0
  [
    set resources 1
    set state "transporting"
    set color red

    ask initial_colony 0
    [
      set resources (resources - 1)
      set label resources
      if resources = 0
      [
        ask initial_colony 0 [set color yellow]
      ]
    ]
  ]
end


to deposit_resource
  set resources 0
  set state "returning"
  set color blue

  ask chosen_nest
  [
    set color red
    set resources (resources + 1)
    set label resources
  ]
end


to calculate_output_data
  set number_new_colonies count nests with [resources > 0]
  ifelse any? nests with [resources > 0]
  [
    set mean_resources_new_colonies mean [resources] of nests with [resources > 0]
    set mean_quality_chosen_nests mean [quality] of nests with [resources > 0]
    set mean_distance_chosen_nests mean [distancexy 0 0] of nests with [resources > 0]
  ]
  [
    set mean_resources_new_colonies 0
    set mean_quality_chosen_nests 0
    set mean_distance_chosen_nests 0
  ]

  ifelse count nests with [resources > 0] >= 2
  [set CV (standard-deviation [resources] of nests with [resources > 0]) / (mean [resources] of nests with [resources > 0]) * 100]
  [set CV 0]

  set mean_quality_all_nests mean [quality] of nests
  set mean_distance_all_nests mean [distancexy 0 0] of nests

  set chosen_nests nests with [resources > 0]
  set raw_resources_new_colonies []
  set raw_quality_all_nests []
  set raw_quality_chosen_nests []
  set raw_distance_chosen_nests []

  set visiting_foragers_all_nests []
  set visited_nests_all_foragers []

  let i 0
  while [i <= number_nests]
  [
    ask nests with [who = i]
    [
      set raw_quality_all_nests lput quality raw_quality_all_nests
      ifelse any? visiting_foragers
      [set visiting_foragers_all_nests lput count visiting_foragers visiting_foragers_all_nests]
      [set visiting_foragers_all_nests lput 0 visiting_foragers_all_nests]
    ]
    set i i + 1
  ]

  let j 0
  while [j <= count end_foragers]
  [
    ask end_foragers with [who = j + number_nests]
    [
      ifelse any? visited_nests
      [set visited_nests_all_foragers lput count visited_nests visited_nests_all_foragers]
      [set visited_nests_all_foragers lput 0 visited_nests_all_foragers]
    ]
    set j j + 1
  ]

  ifelse any? chosen_nests
  [
    while [any? chosen_nests]
    [
      ask max-one-of chosen_nests [resources]
      [
        set raw_resources_new_colonies lput resources raw_resources_new_colonies
        set raw_quality_chosen_nests lput quality raw_quality_chosen_nests
        set raw_distance_chosen_nests lput precision (distancexy 0 0) 3 raw_distance_chosen_nests
        set chosen_nests other chosen_nests
      ]
    ]
  ]
  [
    ask nests
    [
      set raw_resources_new_colonies lput 0 raw_resources_new_colonies
      set raw_quality_chosen_nests lput quality raw_quality_chosen_nests
      set raw_distance_chosen_nests lput 0 raw_distance_chosen_nests
    ]
  ]
end
@#$#@#$#@
GRAPHICS-WINDOW
716
10
1334
629
-1
-1
10.0
1
10
1
1
1
0
0
0
1
-30
30
-30
30
1
1
1
ticks
30.0

BUTTON
87
47
152
80
Go
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
0
83
83
116
Setup
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
87
83
153
116
Go1
go
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

MONITOR
162
40
232
85
Ticks
ticks
17
1
11

PLOT
0
272
354
422
Resources: temporal evolution
NIL
NIL
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"Initial_colony" 1.0 0 -16777216 true "" "plot [resources] of initial_colony 0"
"Foragers" 1.0 0 -13345367 true "" "plot count foragers"
"Sum in new_colonies" 1.0 0 -2674135 true "" "plot sum [resources] of nests"
"Largest new_colony" 1.0 0 -955883 true "" "plot max [resources] of nests"

PLOT
0
121
354
271
Workers status
NIL
NIL
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"Exploring" 1.0 0 -16777216 true "" "plot count foragers with [state = \"exploring\"]"
"Returning" 1.0 0 -13345367 true "" "plot count foragers with [state = \"returning\"]"
"Transporting" 1.0 0 -2674135 true "" "plot count foragers with [state = \"transporting\"]"
"Self_allocating" 1.0 0 -1184463 true "" "plot count foragers with [state = \"self_allocating\"]"

PLOT
361
121
712
271
Resources = f (quality)
quality
resources
0.0
10.0
0.0
10.0
true
true
"set-plot-x-range 0 ceiling (1.1 * max [quality] of nests)" "clear-plot\nset-plot-x-range 0 ceiling (1.1 * max [quality] of nests)"
PENS
"Chosen nests" 1.0 2 -2674135 true "" "ask nests with [resources > 0] [plotxy quality resources]"
"Ignored nests" 1.0 2 -16777216 true "" "ask nests with [resources = 0] [plotxy quality resources]"

PLOT
360
272
711
422
Resources =f (distance)
distance
resources
0.0
10.0
0.0
10.0
true
true
"set-plot-x-range 0 ceiling (1.1 * max [distancexy 0 0] of nests)" "clear-plot\nset-plot-x-range 0 ceiling (1.1 * max [distancexy 0 0] of nests)"
PENS
"Chosen nests" 1.0 2 -2674135 true "" "ask nests with [resources > 0] [plotxy distancexy 0 0 resources]"
"Ignored nests" 1.0 2 -16777216 true "" "ask nests with [resources = 0] [plotxy distancexy 0 0 resources]"

MONITOR
241
19
382
64
Resources at initial_colony
[resources] of initial_colony 0
17
1
11

MONITOR
241
65
354
110
Resources in nests
sum [resources] of nests
17
1
11

MONITOR
357
65
483
110
Resources on foragers
sum [resources] of foragers
17
1
11

MONITOR
385
20
483
65
Number foragers
count foragers
17
1
11

BUTTON
0
47
84
80
NIL
setup-globals
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
0
10
85
43
NIL
clear-all
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

PLOT
1
425
352
575
Mean number of  nests visited
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot mean [count visited_nests] of foragers"

PLOT
360
426
712
576
Mean number of patches visited (total = 3721 patches)
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot mean [count visited_patches] of foragers"

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
0
Rectangle -7500403 true true 151 225 180 285
Rectangle -7500403 true true 47 225 75 285
Rectangle -7500403 true true 15 75 210 225
Circle -7500403 true true 135 75 150
Circle -16777216 true false 165 76 116

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 6.2.0
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
